#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  true

# Enable debug mode (to print errors)
onelogin.saml2.debug =  false


#  Service Provider Data that we are deploying
#

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = Fenix

# Specifies info about where and how the <AuthnResponse> message MUST be
#  returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
onelogin.saml2.sp.assertion_consumer_service.url = https://fenix.tecnico.ulisboa.pt/api/saml-client/returnFromSAML

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = http://fenix.tecnico.ulisboa.pt/java-saml-tookit-jspsample/sls.jsp

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:entity

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert =MIIDvvjEPas1dasdasdGA1UasdGTGlTODOTODO
# -----BEGIN CERTIFICATE-----MIIDvvjEPas1dasdasdGA1UasdGTGlTODOTODO-----END CERTIFICATE-----


# Requires Format PKCS#8   BEGIN PRIVATE KEY	     
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
# Base64.getMimeEncoder().encodeToString(getServiceProviderPrivateKey().getEncoded())
onelogin.saml2.sp.privatekey =MIIEvvjEPas1dasdasdGA1UasdGTGlTODOTODO
#-----BEGIN PRIVATE KEY-----MIIEvvjEPas1dasdasdGA1UasdGTGlTODOTODO=-----END PRIVATE KEY-----


# Identity Provider Data that we want connect with our SP
#

# Identifier of the IdP entity  (must be a URI)
onelogin.saml2.idp.entityid = https://id.tecnico.ulisboa.pt/saml

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
onelogin.saml2.idp.single_sign_on_service.url = https://id.tecnico.ulisboa.pt/saml/saml2/idp/SSOService.php
# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
onelogin.saml2.idp.single_logout_service.url = https://id.tecnico.ulisboa.pt/saml/saml2/idp/SSOService.php

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url =

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
# ID certeficate
onelogin.saml2.idp.x509cert =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


# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint = 
# onelogin.saml2.idp.certfingerprint_algorithm = sha1


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = true

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = true

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata = true

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
# TODO this can be used to defin the authentications method on the SP
# onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact


# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1

# Organization
onelogin.saml2.organization.name = Instituto Superior Tecnico
onelogin.saml2.organization.displayname = IST
onelogin.saml2.organization.url = https://tecnico.ulisboa.pt
onelogin.saml2.organization.lang = PT

# Contacts
onelogin.saml2.contacts.technical.given_name = Diogo
onelogin.saml2.contacts.technical.email_address = diogo.m.r.silva@tecnico.ulisboa.pt
onelogin.saml2.contacts.support.given_name = Silva
onelogin.saml2.contacts.support.email_address = support@tecnico.ulisboa.pt
